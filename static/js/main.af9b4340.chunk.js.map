{"version":3,"sources":["Components/Section.js","Components/FeedbackCard/FeedbackOptions.js","Components/Statistics.js","Components/Notification.js","App.js","index.js"],"names":["Section","title","children","Button","options","onLeaveFeedback","map","option","type","onClick","className","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","props","initialValueGood","initialValueNeutral","initialValueBad","countGood","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","countBad","countNeutral","Math","round","e","value","target","textContent","toLowerCase","this","countPercentage","Component","defaultProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAEe,SAASA,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,gCACE,6BAAKD,IACJC,KCJQ,SAASC,EAAT,GAA+C,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACxC,OACE,8BACGD,EAAQE,KAAI,SAAAC,GACX,OACE,wBAEEC,KAAK,SACLC,QAASJ,EACTK,UAAU,aAJZ,SAMGH,GALIA,QCPF,SAASI,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,qBAAIN,UAAU,OAAd,UACE,qBAAIA,UAAU,aAAd,mBAAkCE,KAClC,qBAAIF,UAAU,aAAd,sBAAqCG,KACrC,qBAAIH,UAAU,aAAd,kBAAiCI,KACjC,qBAAIJ,UAAU,aAAd,oBAAmCK,GAAS,KAC5C,qBAAIL,UAAU,aAAd,gCACsBM,GAAsB,EAD5C,UCZS,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,4BAAIA,I,ICIPC,E,4MAOJC,MAAQ,CACNR,KAAM,EAAKS,MAAMC,iBACjBT,QAAS,EAAKQ,MAAME,oBACpBT,IAAK,EAAKO,MAAMG,iB,EAGlBC,UAAY,WACV,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1Bf,KAAMe,EAAUf,KAAO,MAEzB,EAAKgB,qBACL,EAAKC,mC,EAEPC,SAAW,WACT,EAAKJ,UAAS,SAAAC,GAAS,MAAK,CAC1Bb,IAAKa,EAAUb,IAAM,MAEvB,EAAKc,qBACL,EAAKC,mC,EAEPE,aAAe,WACb,EAAKL,UAAS,SAAAC,GAAS,MAAK,CAC1Bd,QAASc,EAAUd,QAAU,MAE/B,EAAKe,qBACL,EAAKC,mC,EAEPD,mBAAqB,SAAChB,EAAME,EAAKD,GAE/B,OADcD,EAAOE,EAAMD,G,EAG7BgB,gCAAkC,SAACjB,EAAMG,GAEvC,OADwBiB,KAAKC,MAAO,IAAMrB,EAAQG,I,EAIpDV,gBAAkB,SAAA6B,GAChB,IAAMC,EAAQD,EAAEE,OAAOC,YAAYC,cACnC,EAAKZ,UAAS,SAAAC,GAAS,sBACpBQ,EAAQR,EAAUQ,GAAS,O,4CAIhC,WACE,IAAMpB,EAAQwB,KAAKX,mBACjBW,KAAKnB,MAAMR,KACX2B,KAAKnB,MAAMN,IACXyB,KAAKnB,MAAMP,SAEP2B,EAAkBD,KAAKV,gCAC3BU,KAAKnB,MAAMR,KACXG,GAGF,OACE,sBAAKL,UAAU,MAAf,UACE,cAACV,EAAD,CAASC,MAAM,wBAAf,SACE,cAACE,EAAD,CACEC,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiBkC,KAAKlC,oBAG1B,cAACL,EAAD,CAASC,MAAM,aAAf,SACGc,EACC,cAACJ,EAAD,CACEC,KAAM2B,KAAKnB,MAAMR,KACjBC,QAAS0B,KAAKnB,MAAMP,QACpBC,IAAKyB,KAAKnB,MAAMN,IAChBC,MAAOA,EACPC,mBAAoBwB,IAGtB,cAACvB,EAAD,CAAcC,QAAQ,+B,GA/EhBuB,aAAZtB,EACGuB,aAAe,CACpBpB,iBAAkB,EAClBC,oBAAqB,EACrBC,gBAAiB,GAmFNL,QCzFfwB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.af9b4340.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <div>\r\n      <h1>{title}</h1>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\nSection.propTypes ={\r\n  title:PropTypes.string.isRequired,\r\n  children:PropTypes.element,\r\n}\r\n","import PropTypes from 'prop-types';\r\n\r\nexport default function Button({ options, onLeaveFeedback }) {\r\n  return (\r\n    <div>\r\n      {options.map(option => {\r\n        return (\r\n          <button\r\n            key={option}\r\n            type=\"button\"\r\n            onClick={onLeaveFeedback}\r\n            className=\"App-button\"\r\n          >\r\n            {option}\r\n          </button>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  options:PropTypes.array.isRequired,\r\n  onLeaveFeedback:PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nexport default function Statistics({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n}) {\r\n  return (\r\n    <ul className=\"list\">\r\n      <li className=\"list-items\">Good: {good}</li>\r\n      <li className=\"list-items\">Neutral: {neutral}</li>\r\n      <li className=\"list-items\">Bad: {bad}</li>\r\n      <li className=\"list-items\">Total: {total || 0}</li>\r\n      <li className=\"list-items\">\r\n        Positive feedback: {positivePercentage || 0}%\r\n      </li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nStatistics.propTypes={\r\n  good:PropTypes.number.isRequired,\r\n  neutral:PropTypes.number.isRequired,\r\n  bad:PropTypes.number.isRequired,\r\n  total:PropTypes.number.isRequired,\r\n  positivePercentage:PropTypes.number.isRequired,\r\n}","import PropTypes from 'prop-types';\r\n\r\nexport default function Notification({ message }) {\r\n  return <p>{message}</p>;\r\n}\r\nNotification.propTypes = {\r\n  message:PropTypes.string.isRequired,\r\n};","import { Component } from 'react';\r\nimport './App.css';\r\nimport Section from './Components/Section';\r\nimport Button from './Components/FeedbackCard/FeedbackOptions';\r\nimport Statistics from './Components/Statistics';\r\nimport Notification from './Components/Notification';\r\n\r\nclass App extends Component {\r\n  static defaultProps = {\r\n    initialValueGood: 0,\r\n    initialValueNeutral: 0,\r\n    initialValueBad: 0,\r\n  };\r\n\r\n  state = {\r\n    good: this.props.initialValueGood,\r\n    neutral: this.props.initialValueNeutral,\r\n    bad: this.props.initialValueBad,\r\n  };\r\n\r\n  countGood = () => {\r\n    this.setState(prevState => ({\r\n      good: prevState.good + 1,\r\n    }));\r\n    this.countTotalFeedback();\r\n    this.countPositiveFeedbackPercentage();\r\n  };\r\n  countBad = () => {\r\n    this.setState(prevState => ({\r\n      bad: prevState.bad + 1,\r\n    }));\r\n    this.countTotalFeedback();\r\n    this.countPositiveFeedbackPercentage();\r\n  };\r\n  countNeutral = () => {\r\n    this.setState(prevState => ({\r\n      neutral: prevState.neutral + 1,\r\n    }));\r\n    this.countTotalFeedback();\r\n    this.countPositiveFeedbackPercentage();\r\n  };\r\n  countTotalFeedback = (good, bad, neutral) => {\r\n    const total = good + bad + neutral;\r\n    return total;\r\n  };\r\n  countPositiveFeedbackPercentage = (good, total) => {\r\n    const countPercentage = Math.round((100 * good) / total);\r\n    return countPercentage;\r\n  };\r\n\r\n  onLeaveFeedback = e => {\r\n    const value = e.target.textContent.toLowerCase();\r\n    this.setState(prevState => ({\r\n      [value]: prevState[value] + 1,\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const total = this.countTotalFeedback(\r\n      this.state.good,\r\n      this.state.bad,\r\n      this.state.neutral,\r\n    );\r\n    const countPercentage = this.countPositiveFeedbackPercentage(\r\n      this.state.good,\r\n      total,\r\n    );\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Section title=\"Please leave feedback\">\r\n          <Button\r\n            options={['Good', 'Neutral', 'Bad']}\r\n            onLeaveFeedback={this.onLeaveFeedback}\r\n          />\r\n        </Section>\r\n        <Section title=\"Statistics\">\r\n          {total ? (\r\n            <Statistics\r\n              good={this.state.good}\r\n              neutral={this.state.neutral}\r\n              bad={this.state.bad}\r\n              total={total}\r\n              positivePercentage={countPercentage}\r\n            />\r\n          ) : (\r\n            <Notification message=\"No feedback given\" />\r\n          )}\r\n        </Section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}